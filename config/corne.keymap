/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        lh_pht: left_positional_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-unless-interrupted";
            tapping-term-ms = <100>;                        // <---[[produces tap if held longer than tapping-term-ms]]
            quick-tap-ms = <200>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <6 7 8 9 10 11>;    // <---[[right-hand keys]]
        };

        rh_pht: right_positional_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-unless-interrupted";
            tapping-term-ms = <100>;                        // <---[[produces tap if held longer than tapping-term-ms]]
            quick-tap-ms = <200>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <0 1 2 3 4 5>;    // <---[[right-hand keys]]
        };
    };
        
    keymap {
        compatible = "zmk,keymap";

        dvorak {
            bindings = <
&none  &kp SINGLE_QUOTE  &kp COMMA       &kp PERIOD   &kp P             &kp Y        &kp F      &kp G              &kp C        &kp R            &kp L            &none
&none  &lh_pht LEFT_GUI A    &lh_pht LEFT_ALT O  &lh_pht LCTRL E  &lh_pht LEFT_SHIFT U  &kp I        &kp D      &rh_pht RIGHT_SHIFT H  &rh_pht RCTRL T  &rh_pht RIGHT_ALT N  &rh_pht RIGHT_GUI S  &none
&none  &kp SEMICOLON     &kp Q           &kp J        &kp K             &kp X        &kp B      &kp M              &kp W        &kp V            &kp Z            &none
                                         &kp DELETE   &lt 1 BACKSPACE   &kp ENTER    &kp SPACE  &kp TAB            &kp ESCAPE
            >;
        };

        nav {
            bindings = <
&trans  &trans        &trans    &trans     &trans     &trans    &trans    &kp LC(X)  &kp LC(C)  &kp LC(V)  &kp LC(Z)  &trans
&none   &kp LG(LGUI)  &kp LALT  &kp LCTRL  &kp LSHFT  &trans    &kp LEFT  &kp UP     &kp DOWN   &kp RIGHT  &trans     &trans
&trans  &trans        &trans    &trans     &trans     &trans    &kp HOME  &kp PG_UP  &kp PG_DN  &kp END    &none      &trans
                                &trans     &trans     &trans    &trans    &trans     &trans
            >;
        };

        lower_layer {
            bindings = <
&kp TAB     &kp N1        &kp N2        &kp N3        &kp N4        &kp N5          &kp N6    &kp N7    &kp N8    &kp N9     &kp N0  &kp BSPC
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &kp LEFT  &kp DOWN  &kp UP    &kp RIGHT  &trans  &trans
&kp LSHFT   &trans        &trans        &trans        &trans        &trans          &trans    &trans    &trans    &trans     &trans  &trans
                                        &kp LGUI      &trans        &kp SPACE       &kp RET   &trans    &kp RALT
            >;
        };

        raise_layer {
            bindings = <
&kp TAB    &kp EXCL  &kp AT  &kp HASH  &kp DLLR  &kp PRCNT    &kp CARET  &kp AMPS   &kp ASTRK  &kp LPAR  &kp RPAR  &kp BSPC
&kp LCTRL  &trans    &trans  &trans    &trans    &trans       &kp MINUS  &kp EQUAL  &kp LBKT   &kp RBKT  &kp BSLH  &kp GRAVE
&kp LSHFT  &trans    &trans  &trans    &trans    &trans       &kp UNDER  &kp PLUS   &kp LBRC   &kp RBRC  &kp PIPE  &kp TILDE
                             &kp LGUI  &trans    &kp SPACE    &kp RET    &trans     &kp RALT
            >;
        };
    };
};
