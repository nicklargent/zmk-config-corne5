/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    combos {
        compatible = "zmk,combos";

        left_fn_combo {
            bindings = <&kp LEFT_GUI>;
            key-positions = <36 37>;
        };

        right_fn_combo {
            bindings = <&mo 4>;
            key-positions = <41 40>;
        };
    };

    behaviors {
        morph_sp_bs: morph_sp_bs {
            compatible = "zmk,behavior-mod-morph";
            label = "MORPH_SP_BS";
            bindings = <&kp SPACE>, <&kp BACKSPACE>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        morph_2_enter: morph_2_enter {
            compatible = "zmk,behavior-mod-morph";
            label = "MORPH_2_ENTER";
            bindings = <&mo 2>, <&kp ENTER>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        morph_3_tab: morph_3_tab {
            compatible = "zmk,behavior-mod-morph";
            label = "MORPH_3_TAB";
            bindings = <&mo 3>, <&kp TAB>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        dvorak {
            bindings = <
&none  &kp SINGLE_QUOTE  &kp COMMA  &kp PERIOD  &kp P      &kp Y    &kp F         &kp G           &kp C         &kp R  &kp L  &none
&none  &kp A             &kp O      &kp E       &kp U      &kp I    &kp D         &kp H           &kp T         &kp N  &kp S  &none
&none  &kp SEMICOLON     &kp Q      &kp J       &kp K      &kp X    &kp B         &kp M           &kp W         &kp V  &kp Z  &none
                                    &kp LCTRL   &kp LSHFT  &mo 1    &morph_sp_bs  &morph_2_enter  &morph_3_tab
            >;

            label = "DV";
        };

        symbol {
            bindings = <
&none  &kp EXCL   &kp AT     &kp HASH  &kp DLLR      &kp PRCNT    &kp CARET      &kp AMPS   &kp ASTRK  &kp LPAR  &kp RPAR  &none
&none  &kp GRAVE  &kp TILDE  &kp FSLH  &kp QUESTION  &none        &kp MINUS      &kp EQUAL  &kp LBKT   &kp RBKT  &kp BSLH  &none
&none  &kp COLON  &trans     &trans    &none         &none        &kp UNDER      &kp PLUS   &kp LBRC   &kp RBRC  &kp PIPE  &none
                             &trans    &trans        &trans       &kp BACKSPACE  &kp ENTER  &kp TAB
            >;

            label = "SYM";
        };

        navigation {
            label = "NAV";
            bindings = <
&none  &kp ESCAPE  &none      &none     &none     &none         &kp BACKSPACE  &kp HOME   &kp UP_ARROW  &kp END    &kp DELETE  &none
&none  &kp TAB     &kp LCTRL  &kp LALT  &kp LGUI  &kp LSHIFT    &none          &kp LEFT   &kp DOWN      &kp RIGHT  &kp TAB     &none
&none  &none       &none      &none     &trans    &trans        &none          &kp PG_UP  &kp PG_DN     &none      &none       &none
                              &trans    &trans    &kp ENTER     &kp ENTER      &trans     &trans
            >;
        };

        number {
            bindings = <
&none  &kp N1   &kp N2  &kp N3         &kp N4           &kp N5           &kp N6      &kp N7    &kp N8    &kp N9     &kp N0   &none
&none  &kp TAB  &none   &none          &kp KP_PLUS      &kp KP_MINUS     &kp RSHIFT  &kp RGUI  &kp RALT  &kp RCTRL  &kp TAB  &none
&none  &none    &none   &none          &kp KP_MULTIPLY  &kp KP_DIVIDE    &none       &none     &none     &none      &none    &none
                        &kp BACKSPACE  &kp DOT          &kp ENTER        &trans      &trans    &trans
            >;

            label = "NUM";
        };

        function {
            bindings = <
&none  &kp F1        &kp F2        &kp F3        &kp F4        &kp F5          &kp F6      &kp F7  &kp F8  &kp F9   &kp F10  &none
&none  &none         &kp LCTRL     &kp LALT      &kp LGUI      &kp LSHFT       &bt BT_CLR  &none   &none   &kp F11  &kp F12  &none
&none  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &none       &none   &none   &none    &none    &none
                                   &none         &none         &none           &none       &none   &none
            >;

            label = "FN";
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };
};
